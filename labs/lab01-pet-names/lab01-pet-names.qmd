---
title: "Lab 01 - Pet names"
author: "Tim Boll√©"
---

```{r include = FALSE}
knitr::opts_chunk$set(
  eval = FALSE,
  out.width = "80%",
  fig.asp = 0.618,
  fig.width = 10
)
library(tidyverse)
library(openintro)
library(ggrepel)
```

```{r photo, fig.margin = TRUE, echo = FALSE, fig.width = 3, fig.cap = "Photo by [Atsuko Sato](https://kabosu112.exblog.jp/iv/detail/?s=9944144&amp;i=201002%2F12%2F90%2Fa0126590_22301391.jpg)", eval = TRUE}
knitr::include_graphics("figs/Original_Doge_meme.jpg")
```

Le but de cet exercice est de pratiquer les premiers √©l√©ments vus concernant R et Git/Github.

# Pr√©paration

## Terminologie

Nous en avons d√©j√† parler mais r√©p√©ter ne fait pas de mal:

-   **R:** Le language de prorgammation qui sera utilis√© dans ce cours.

-   **RStudio:** Un environnement de d√©veloppement int√©gr√© (IDE) pour R. En d'autres termes, une interface pour travailler efficacement avec R.

-   **Git:** Un logiciel de gestion de versions

-   **GitHub:** Une plateforme web pour accueillir des fichiers versionn√©s et faciliter la collaboration entre utilisateurs.

-   **Repository:** Un repository Git (ou repo) contient tous les fichier du projet ainsi que ces versions.

## Github

Nous allons commencer par r√©cup√©rer le fichier Rmd dans lequel vous allez enregistrer vos r√©ponses. Git devrait √™tre correctement install√©. Si ce n'est pas le cas, voyez avec le prof.

Sur votre portail de cours, acceptez l'invitation √† rejoindre le projet GitHub Classroom pour le Lab01.

Copiez le lien de repo personnel pour le Lab01. Cela devrait ressember √† `lab01-<votre nom d'utilisateur GitHub>`.

Dans RStudio:

-   Fichier \> Nouveau Projet
-   Version Control \> Git
-   Dans *Repository URL* : indiquez l'adresse: <https://github.com/PRO1036/lab01-[username].git>
-   Choisissez un nom pour le dossier qui sera cr√©√©, par exemple "Lab01"
-   Choisissez o√π vous voulez cr√©er le projet dans votre ordinateur.

Cela va copier les fichiers pr√©sents sur GitHub, et les copier dans le dossier sp√©cifi√©. 

Dans RStudio, vous devriez voir le fichier .Rmd list√© en bas √† droite dans la liste de fichier:

![](figs/rstudio-files.png)

Si vous cliquez maintenant sur le fichier .rmd, il va apparaitre dans la zone en haut √† gauche. Vous pourrez l'√©diter et le "Render/Knit" pour voir le r√©sultat final.

Veuillez noter que ce que vous √©criver dans le fichier Rmd et ce que vous √©crivez dans la console ne communiquent pas (il s'agit de deux environnements diff√©rents). Si vous voulez utiliser la console (zone en bas √† gauche), il faut retaper les commandes.

# RStudio

RStudio est organis√© en 4 panneaux.

```{r rstudio-anatomy, fig.fullwidth=TRUE, echo = FALSE, eval = TRUE}
knitr::include_graphics("figs/rstudio-anatomy.png")
```

-   En bas √† gauche se trouve la console. C'est ici que vous pouvez √©crire du code qui sera directement interpr√©t√©. Essayez par exemple `2 + 2`.
-   En bas √† droite se trouve le panneau de fichiers, ainsi que d'autres que nous verrons plus tard lors d'analyses.
-   Si vous cliquez sur un fichier, il sera ouvert dans l'√©diteur, panneau en haut √† gauche.
-   Dans le panneau en haut √† droite, on retrouve l'environnement de travail. Si vous d√©finissez une variable, elle apparaitra ici. Essayez par exemple de taper `x <- 2` dans la console. Observez ce qu'il se passe dans l'environnement.
-   C'est √©galement ici que l'on retrouve le panneau *Git* o√π vous pourrez g√©rer les versions de vos fichiers.

# Warm up

Un peu d'√©chaffement:

::: callout-tip
## YAML

La partie du haut de votre fichier R Markdown, entre les lignes traitill√©es, est appel√©e **YAML**, accronyme pour "YAML Ain't Markup Language". C'est une mani√®re human friendly de fournir des informations sur des documents et des code, et qui peut √™tre comprise par de nombreux langages de programmation.
:::

## √âtape 1: Mise √† jour du YAML

Ouvrez le fichier R Markdown (Rmd) dans le projet que vous avez clon√©. Changez l'auteur et la date.

## √âtape 2: Knit

Cliquez sur **Knit** (le bouton bleu en haut de l'√©diteur). Cela va ex√©cuter le code dans le document, et g√©n√©rer un fichier HTML ou .md selon ce que l'on a choisi dans le YAML. Ici, en indiquant `output: github_document`, nous allons g√©n√©rer un fichier .md, qui peut facilement √™tre lu dans GitHub. Vous devriez voir apparaitre une nouvelle fen√™tre avec le r√©sultat. De nouvaux fichiers devraient √™tre apparus dans le panneau de fichiers.

## √âtape 2: Commit

Ouvrez le panneau **Git** en haut √† droite.

Vous devriez voir votre fichier Rmd marqu√© comme modifi√© et son output `lab01-pet-names.md` marqu√© comme *untracked*.

![](figs/rstudio-git.png)

En cliquant sur **diff**, vous verrez les diff√©rence entre le dernier commit et l'√©tat actuel du document. Si cela vous convient, vous pouvez s√©lectionner les fichiers √† commit, ajouter un message dans le **Commit message**, par exemple *"Mise √† jour de l'auteur et de la date"*. V√©rfiez bien que les deux fichiers sont coch√©s. Cliquez ensuite sur **Commit**.

Il n'est pas n√©cessaire de faire un commit apr√®s chaque changement. Faites le plut√¥t apr√®s avoir ajout√© une *fonctionnalit√©* √† votre code. Faite le quand cela vous semble pertinent, afin de pouvoir v√©rifier, comparer ou restorer.

## √âtape 3: Push

Maintenant que vous avez fait vos modifications, vous allez pusher vos changements sur le web, c'est-√†-dire sur votre repo sur Github. Cela permettra aux autres (les profs) de voir vos changements. Appuyez simplement sur **Push**.

Cela devrait faire apparaitre une fen√™tre. Entrez vos informations de connexion pour Github.

**Grosse question:** Laquelle des √©tapes pr√©c√©dentes (changement du YAML, committing, et pushing) a besoin de communiquer avec Github?[^1]

[^1]: Seulement l'√©tape du push √† besoin de communiquer avec Gihub, c'est pour cela que vos informations sont demand√©es.

# Packages

R est un langage open-source, et les d√©veloppeurs ajoutent des fonctionnalit√© √† travers des packages. Nous allons utiliser les packages suivants:

-   **tidyverse**: Une collection de packages pour faire de l'analyse de donn√©es de mani√®re "tidy"
-   **openintro**: un package qui contient les datasets de la ressource OpenIntro.

Nous utilisons la fonction `library()` pour charger les packages. Dans votre document R Markdown, vous allez voir un bloc de code R nomm√© `load-packages` qui contient les lignes n√©cessaires √† charger les packages. Vous pouvez √©galement les charger dans la console en cliquant sur la petite fl√®che vert **Run Current Chunk**.

Avant de pouvoir faire √ßa, il faudra peut-√™tre installer les packages. Cela vous sera propos√© en haut de votre √©diteur.

![](figs/message-packages.png)

Quand vous knittez le document, les lignes dans les blocs de code R sont √©galement ex√©cut√©es. Les packages seront donc charg√©s.

# Donn√©es

La ville de [Seattle, WA](https://en.wikipedia.org/wiki/Seattle) a un portail de donn√©es en source ouverte, qui inclut les animaux de compagnie. Pour chaque animal enregistr√©, nous avons acc√®s √† son nom et son esp√®ce. Les donn√©es utilis√©es dans cet exercice se trouvent dans le package **openintro** et s'appelle `seattlepets`. Il n'est donc pas n√©cessaire de le charger s√©paremment.

Vous pouvez voir le contenu du jeu de donn√©es sous forme taulaire avec la fonction `View()`. √Ä noter que cette fonction n'est pas utile dans votre document R markdown, mais sert plut√¥t dans la console pour explorer les donn√©es. Une nouvelle fen√™tre va s'ouvrir avec les donn√©es (ce qui n'est pas compatible avec l'id√©e d'un document static type html).

```{r view-data}
View(seattlepets)
```

```{r data.viewer, echo = FALSE, eval = TRUE, fig.align = "left"}
knitr::include_graphics("figs/view-data.png")
```

Vous pouvez en apprendre plus sur le jeu de donn√©es en appelant la fonction d'aide `?seattlepets`.

# Exercices

## Exerice 1

Selon l'aide, combien d'animaux sont pr√©sents dans le dataset ?

üß∂ ‚úÖ *Ecrivez votre r√©ponse dans le document, sous Exercice 1. Knit, et commit avec un message !*

## Exercice 2

Selon l'aide, combien d'animaux sont pr√©sents dans le dataset ?

üß∂ ‚úÖ *√âcrivez votre r√©ponse dans le document, sous Exercice 2. Knit, commit avec un message et pushez !*

## Exercice 3

Quels sont les trois nom d'animaux les plus commun √† Seattle ? Pour r√©pondre √† cette question, you devez compter la fr√©quence d'apparition de chaque nom, et afficher les r√©sultats en ordre d√©croissant. Utilisez le code suivant.

::: callout-tip
Le code suivant peut √™tre lu comme "Prend le dataset `seattlepets`, puis compte le nombre de ligne avec le m√™me `animal_name`, et affiche le r√©sultat en ordre d√©croissant". le *puis* dans la phrase pr√©c√©dente correspond √† l'op√©rateur de pipe `%>%`, qui prend ce qui se trouve avant et l'envoi comme premier argumet de ce qui vient apr√®s.
:::

```{r}
seattlepets %>%
  count(animal_name, sort = TRUE)
```

üß∂ ‚úÖ *Ecrivez votre r√©ponse dans le document, sous Exercice 3. Cette fois, votre r√©ponse va √©galement inclure un morceau de code. Utilisez le block de code mis √† votre disposition pour √ßa. Knit et commit avec un message !*

## Exercice 4

Nous pouvons √©galement voir les noms les plus communs pour chaque esp√®ce. Pour cela, nous devons d'abord `group_by()` par l'`species`, puis faire le count.

```{r species-names, eval=TRUE}
seattlepets %>% 
  group_by(species) %>%
  count(animal_name, sort = TRUE)
```

::: callout-note
On observe beaucoup de NA pour les chats... pauvres chatons sans noms...
:::

Cet affichage n'est pas optimal. Nous voulons connaitre le nom le plus commun pour les chats et les chiens mais il n'y a quasiment aucun chat d'affich√© ! C'est parce qu'il y a bien plus de chiens que de chats dans le dataset. On peut le v√©rifier en comptant le nombre d'animaux par esp√®ce.

```{r species, eval=TRUE}
seattlepets %>%
  count(species, sort = TRUE)
```

Cherchons le top 5 de chaque esp√®ce. Pour cela, nous pouvons utiliser la fonction `slice_max()`. Le premier argument de la fonction est la variable dont nous voulons garder le plus grand nombre, dans notre cas `n`. Le deuxi√®me argument est le nombre de lignes que nous voulons afficher, dans notre cas `n=5`. Ici, les deux arguments mentionnent un `n`. Dans le premier cas, il y a un variable appel√© `n` dans le dataframe r√©sultant du `count`, alors que dans le deuxi√®me, il s'agit du nom de l'argument, d√©finit dans `slice_max()`.

```{r species-names-top5, eval=TRUE}
seattlepets %>% 
  group_by(species) %>%
  count(animal_name, sort = TRUE) %>% 
  slice_max(n, n = 5)
```

√Ä partir de ce r√©sultat, nous pouvons facilement identifier les noms les plus communs pour les chats et les chiens, mais le r√©sutlat est tri√© selon `n` (la fr√©quence) et non par rapport √† l'`species`. En ajoutant une nouvelle ligne au pipe pr√©c√©dent, faite en sorte que les r√©sultats soient tri√©s selon l'esp√®ce d'abord, puis par `n`. Pour cela, vous pouvez vous servir de la fonction `arrange`. Vous pourrez indiquer ce par quoi vous voulez tier: `arrange(variable 1, variable 2)`. √Ä vous d'essayer et de voir quel r√©sultat est le bon !

üß∂ ‚úÖ *Ecrivez votre r√©ponse dans le document, sous Exercice 4, en incluant les blocks de code n√©cessaires. Knit et commit avec un message !*

## Exercice 5

La visualisation suivante affiche la proportion de chiens et de chats avec le m√™me nom. Les 20 noms les plus courrants pour chaque esp√®ce sont affich√©s. La ligne diagonale correspond √† la ligne $x = y$; si un nom appara√Æt sur cette ligne, cela signifie qu'il a le m√™me succ√®s pour les chiens que pour les chats.

```{r eval = TRUE, echo = FALSE, fig.fullwidth = TRUE}
# data prep
name_props <- seattlepets %>% 
  filter(
    !is.na(animal_name),
    species %in% c("Dog", "Cat")
    ) %>%
  group_by(species) %>% 
  count(animal_name, sort = TRUE) %>%
  mutate(prop = n / sum(n))
    
cat_name_props <- name_props %>%
  filter(species == "Cat") %>%
  rename(cat_prop = prop) %>%
  slice(1:30)

dog_name_props <- name_props %>%
  filter(species == "Dog") %>%
  rename(dog_prop = prop) %>%
  slice(1:30)
    
comb_name_props <- inner_join(cat_name_props, dog_name_props, 
                              by = "animal_name") %>%
  ungroup() %>%
  select(animal_name, cat_prop, dog_prop)
    
# create viz
ggplot(comb_name_props, aes(x = cat_prop, y = dog_prop)) +
  geom_abline(intercept = 0, 
              color = COL["lgray","full"], 
              alpha = 0.8, 
              size = 1.5) +
  geom_text_repel(aes(label = animal_name), 
                  segment.color = COL["gray","full"], 
                  seed = 291252, max.iter = 10000) +
  geom_point(color = COL["blue","full"], alpha = 0.8) +
  theme_minimal() +
  labs(x = "Proportion of cats", y = "Proportion of dogs") +
  xlim(0.002, 0.01) +
  ylim(0.002, 0.01)

```

-   Quels noms sont plus commun pour des chats que pour des chiens ? Ceux au dessus de la ligne ou bien en dessous ?
-   Est ce que la relation entre les deux variables (proportion de chats avec un nom donn√© et proportion de chiens avec un nom donn√©) est positive ou bien n√©gative ? Que cela signifie-t-il dans le contexte de notre jeu de donn√©es ?

üß∂ ‚úÖ *Ecrivez votre r√©ponse dans le document, sous Exercice 5, en incluant les blocks de code n√©cessaires. C'est le dernier donc assurez que tout soit propre ! Knit, commit avec un message !*
